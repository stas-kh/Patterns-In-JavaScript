{"version":3,"sources":["configurationManager.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,0BAA0B,4BAA1B;AACN,IAAM,wBAAwB,cAAxB;;AAEN,IAAI,uBAAwB,YAAY;AACvC,KAAI,YAAY,IAAZ,CADmC;;KAEjC;AACL,WADK,MACL,GAAc;yBADT,QACS;;AACb,QAAK,aAAL,GAAqB,IAArB,CADa;AAEb,QAAK,iBAAL,GAAyB,EAAzB,CAFa;GAAd;;eADK;;mCAMW,MAAM;AACrB,QAAG,SAAS,IAAT,IAAiB,SAAS,SAAT,EAAoB;AACvC,UAAK,aAAL,GAAqB,IAArB,CADuC;KAAxC,MAEO;AACN,UAAK,aAAL,GAAqB,KAAK,GAAL,CAAS,qBAAT,CAArB,CADM;KAFP;;;;wBAOI,UAAU;;;AACd,SAAK,kBAAL,CAAwB,gBAAQ;AAC/B,WAAK,iBAAL,GAAyB,KAAK,KAAL,CAAW,IAAX,CAAzB,CAD+B;AAE/B,SAAI,OAAO,QAAP,KAAoB,UAApB,IAAkC,aAAa,SAAb,EAAwB;AAC7D,eAAS,IAAT,GAD6D;MAA9D;KAFuB,CAAxB,CADc;;;;sCAiBI,UAAU;AAC5B,QAAI,MAAM,IAAI,cAAJ,EAAN,CADwB;AAE5B,QAAI,gBAAJ,CAAqB,kBAArB,EAF4B;AAG5B,QAAI,MAAJ,GAAa,YAAY;AACxB,SAAI,OAAO,QAAP,KAAoB,UAApB,IAAkC,aAAa,SAAb,EAAwB;AAC7D,eAAS,IAAT,CAAc,IAAd,EAAoB,IAAI,YAAJ,CAApB,CAD6D;MAA9D;KADY,CAHe;AAQ5B,QAAI,IAAJ,CAAS,KAAT,EAAgB,KAAK,aAAL,EAAoB,IAApC,EAR4B;AAS5B,QAAI,IAAJ,GAT4B;;;;uBAYzB,WAAW;AACd,QAAI,MAAM,OAAO,QAAP,CAAgB,IAAhB,CAAqB,WAArB,EAAN;QACH,OAAO,UAAU,OAAV,CAAkB,SAAlB,EAA6B,MAA7B,EAAqC,WAArC,EAAP;QACA,QAAQ,IAAI,MAAJ,CAAW,SAAS,IAAT,GAAgB,mBAAhB,CAAnB;QACA,OAAO,MAAM,IAAN,CAAW,GAAX,CAAP,CAJa;;AAMd,QAAI,SAAS,IAAT,IAAiB,SAAS,SAAT,EAAoB;AACxC,YAAO,IAAP,CADwC;KAAzC;AAGA,QAAI,KAAK,CAAL,MAAY,IAAZ,IAAoB,KAAK,CAAL,MAAY,SAAZ,EAAuB;AAC9C,YAAO,EAAP,CAD8C;KAA/C;AAGA,WAAO,mBAAmB,KAAK,CAAL,EAAQ,OAAR,CAAgB,KAAhB,EAAuB,GAAvB,CAAnB,CAAP,CAZc;;;;uBApBK;AACnB,QAAI,OAAO,IAAP,CAAY,KAAK,iBAAL,CAAZ,CAAoC,MAApC,KAA+C,CAA/C,EAAkD;AACrD,WAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN,CADqD;KAAtD,MAEO;AACN,YAAO,KAAK,iBAAL,CADD;KAFP;;;;SAxBI;KAFiC;;AA4DvC,QAAO;AACN,sCAAc;AACb,OAAI,cAAc,IAAd,EAAoB;AACvB,gBAAY,IAAI,MAAJ,EAAZ,CADuB;IAAxB;AAGA,UAAO,SAAP,CAJa;GADR;EAAP,CA5DuC;CAAZ,EAAxB;;AAsEJ,qBAAqB,WAArB,GAAmC,eAAnC,CAAmD,uBAAnD;AACA,qBAAqB,WAArB,GAAmC,IAAnC,CAAwC,YAAY;;AAEnD,SAAQ,GAAR,CAAY,YAAZ,EAFmD;AAGnD,SAAQ,GAAR,CAAY,qBAAqB,WAArB,GAAmC,aAAnC,CAAZ,CAHmD;CAAZ,CAAxC","file":"configurationManager-compiled.js","sourcesContent":["const pathToConfigurationFile = \"./config/bingo-config.json\";\r\nconst pathToConfigParamName = \"pathToConfig\";\r\n\r\nvar ConfigurationManager = (function () {\r\n\tlet _instance = null;\r\n\tclass Config {\r\n\t\tconstructor() {\r\n\t\t\tthis._pathToConfig = null;\r\n\t\t\tthis._appConfiguration = {};\r\n\t\t}\r\n\r\n\t\tsetPathToConfig(path) {\r\n\t\t\tif(path !== null && path !== undefined) {\r\n\t\t\t\tthis._pathToConfig = path;\r\n\t\t\t} else {\r\n\t\t\t\tthis._pathToConfig = this.GET(pathToConfigParamName);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tinit(callback) {\r\n\t\t\tthis._loadConfiguration(data => {\r\n\t\t\t\tthis._appConfiguration = JSON.parse(data);\r\n\t\t\t\tif (typeof callback === \"function\" && callback !== undefined) {\r\n\t\t\t\t\tcallback.call();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tget configuration() {\r\n\t\t\tif (Object.keys(this._appConfiguration).length === 0) {\r\n\t\t\t\tthrow new Error(\"Your config file hasn't been uploaded\");\r\n\t\t\t} else {\r\n\t\t\t\treturn this._appConfiguration;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_loadConfiguration(callback) {\r\n\t\t\tlet xhr = new XMLHttpRequest();\r\n\t\t\txhr.overrideMimeType(\"application/json\");\r\n\t\t\txhr.onload = function () {\r\n\t\t\t\tif (typeof callback === \"function\" && callback !== undefined) {\r\n\t\t\t\t\tcallback.call(this, xhr.responseText);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.open(\"GET\", this._pathToConfig, true);\r\n\t\t\txhr.send();\r\n\t\t}\r\n\r\n\t\tGET(paramName) {\r\n\t\t\tlet url = window.location.href.toLowerCase(),\r\n\t\t\t\tname = paramName.replace(/[\\[\\]]/g, \"\\\\$&\").toLowerCase(),\r\n\t\t\t\tregex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\r\n\t\t\t\tdata = regex.exec(url);\r\n\r\n\t\t\tif (data === null || data === undefined) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif (data[2] === null || data[2] === undefined) {\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t\treturn decodeURIComponent(data[2].replace(/\\+/g, \" \"));\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tgetInstance() {\r\n\t\t\tif (_instance === null) {\r\n\t\t\t\t_instance = new Config();\r\n\t\t\t}\r\n\t\t\treturn _instance;\r\n\t\t}\r\n\t}\r\n}());\r\n\r\nConfigurationManager.getInstance().setPathToConfig(pathToConfigurationFile);\r\nConfigurationManager.getInstance().init(function () {\r\n\t/* Bootstrap the application */\r\n\tconsole.log(\"App loaded\");\r\n\tconsole.log(ConfigurationManager.getInstance().configuration);\r\n});"]}